{"version":3,"sources":["config.js","App.js","reportWebVitals.js","index.js"],"names":["exports","base_url","fetch","require","Seat","className","this","props","booked","number","style","React","Component","Train","state","seatState","Array","fill","selectedSeatCount","method","headers","then","res","json","console","log","local_seats","map","each","forEach","e","setState","catch","err","error","updateBookedSeats","fontSize","margin","paddingTop","display","gridTemplateColumns","justifyContent","lineHeight","alignItems","width","height","backgroundColor","borderRadius","marginLeft","i","marginBottom","onChange","target","value","_","onClick","options","body","now_booked","already_booked","marginTop","color","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b75aa2b0.chunk.js","sourcesContent":["const base_url = \"https://35.200.253.45:3000\"\n\nexports.base_url = base_url\n","import './App.css';\nimport React from 'react';\n\nconst fetch = require('node-fetch');\nconst {base_url} = require('./config')\n\nclass Seat extends React.Component {\n    render() {\n        let className = this.props.booked != null ? 'seat ' : 'seat_loading';\n        className += this.props.booked === 1 ? \"booked\" : this.props.booked === 2 ? \"booked_now\" : \"\"\n        className += this.props.number % 7 === 3 ? \" path\" : \"\"\n        return (\n            <div className={className} style={this.props.style}>\n                {this.props.number}\n            </div>\n        );\n    }\n}\n\nclass Train extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            seatState: Array(80).fill(null),\n            selectedSeatCount: 1,\n        };\n    }\n\n    updateBookedSeats() {\n        let options = {\n            method: 'GET',\n            headers: {'Content-Type': 'application/json'},\n        };\n\n        fetch(base_url, options)\n            .then(res => res.json())\n            .then(json => {\n                console.log(json)\n                let local_seats = Array(80).fill(0);\n                const booked_seats = json.map(each => each['_id']);\n                booked_seats.forEach(e => {\n                    local_seats[e - 1] = 1;\n                })\n                this.setState({\n                    seatState: local_seats\n                })\n            })\n            .catch(err => console.error('error:' + err));\n    }\n\n    componentDidMount() {\n        this.updateBookedSeats();\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <span style={{fontSize: \"xx-large\", margin: \"auto\", paddingTop: \"1rem\"}}>Book your Tickets</span>\n                <div style={{display: \"grid\", gridTemplateColumns: \"repeat(7, auto)\",justifyContent: \"center\"}} >\n                    <p style={{lineHeight: \"2rem\", display: \"inline-block\"}}>\n                        <div style={{display: \"flex\", alignItems: \"center\"}}>\n                            <div style={{width: \"1rem\", height: \"1rem\", backgroundColor: \"#1fd262\", borderRadius: \"0.2rem\"}}></div>\n                            <div style={{marginLeft: \"0.5rem\"}}>Booked</div>\n                        </div>\n                        <div style={{display: \"flex\", alignItems: \"center\"}}>\n                            <div style={{width: \"1rem\", height: \"1rem\", backgroundColor: \"#d2ca1f\", borderRadius: \"0.2rem\"}}></div>\n                            <div style={{marginLeft: \"0.5rem\"}}>You Just Booked</div>\n                        </div>\n                        <div style={{display: \"flex\", alignItems: \"center\"}}>\n                            <div style={{width: \"1rem\", height: \"1rem\", backgroundColor: \"#ffffff\", borderRadius: \"0.2rem\"}}></div>\n                            <div style={{marginLeft: \"0.5rem\"}}>Available</div>\n                        </div>\n                    </p>\n                    <div className=\"seats_layout\">\n                        {this.state.seatState.map((e, i) => <Seat\n                            number={i + 1} booked={e}/>)}\n                    </div>\n                    <div>\n                        <div style={{marginBottom: \"1rem\"}}>\n                            <p>Seats</p>\n                            <select onChange={(e) => {\n                                this.setState({selectedSeatCount: e.target.value})\n                            }}>\n                                {Array(7).fill(null).map((_, i) => <option value={i + 1}> {i + 1} </option>)}\n                            </select>\n                        </div>\n\n                        <button className={\"sqe_button\"} onClick={() => {\n                            let options = {\n                                method: 'POST',\n                                headers: {'Content-Type': 'application/json'},\n                                body: `{\"count\": ${this.state.selectedSeatCount}}`\n                            };\n\n                            fetch(base_url + \"/book\", options)\n                                .then(res => res.json())\n                                .then(json => {\n                                    if ('msg' in json) {\n\n                                    }\n                                    let now_booked = json.now_booked;\n                                    let already_booked = json.booked;\n                                    let local_seats = Array(80).fill(0);\n                                    const booked_seats = already_booked.map(each => each['_id']);\n                                    booked_seats.forEach(e => {\n                                        local_seats[e - 1] = 1;\n                                    })\n                                    now_booked.forEach(e => {\n                                        local_seats[e - 1] = 2;\n                                    })\n                                    this.setState({\n                                        seatState: local_seats\n                                    })\n                                })\n                                .catch(err => console.error('error:' + err));\n                        }}>Book\n                        </button>\n                    </div>\n                </div>\n                <button className={\"sqe_button\"} style={{marginTop: \"1rem\", backgroundColor: \"#e91e1e\", color: \"white\"}} onClick={() => {\n                    let options = {\n                        method: 'DELETE',\n                        headers: {'Content-Type': 'application/json'},\n                    };\n\n                    fetch(base_url + \"/clear\", options)\n                        .then(() => {\n                            this.updateBookedSeats();\n\n                        })\n                        .catch(err => console.error('error:' + err));\n                }}>Clear\n                </button>\n            </div>\n        );\n    }\n}\n\nfunction App() {\n    return (\n        <div>\n            <Train/>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}